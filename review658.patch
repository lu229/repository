diff --git a/mace/ops/strided_slice.cc b/mace/ops/strided_slice.cc
index df7c17d..d5a1842 100644
--- a/mace/ops/strided_slice.cc
+++ b/mace/ops/strided_slice.cc
@@ -127,7 +127,7 @@ class StridedSliceOp : public Operation {
         strides_data, strides_data + strides->size());
 
     MACE_CHECK(input->size() > 0 && input->dim_size() > 0 &&
-               input->dim_size() <= 5,
+               input->dim_size() <= 5,  // for megengine is 5, the others are 4
                "The input size should larger than 0."
                " And input dims should be an integer in (0, 5].");
 
diff --git a/tools/device.py b/tools/device.py
index d5e4594..c2ca154 100644
--- a/tools/device.py
+++ b/tools/device.py
@@ -220,8 +220,8 @@ class DeviceWrapper:
                     "MACE_LOG_TENSOR_RANGE=%d" % (1 if quantize_stat else 0),
                     "%s/%s" % (target_dir, target_name),
                     "--model_name=%s" % model_tag,
-                    "--input_node=%s" % ",".join(input_nodes),
-                    "--output_node=%s" % ",".join(output_nodes),
+                    "--input_node='%s'" % ",".join(input_nodes),
+                    "--output_node='%s'" % ",".join(output_nodes),
                     "--input_shape=%s" % ":".join(input_shapes),
                     "--output_shape=%s" % ":".join(output_shapes),
                     "--input_data_format=%s" % ",".join(input_data_formats),
diff --git a/tools/python/convert.py b/tools/python/convert.py
index d91cde8..f35c229 100644
--- a/tools/python/convert.py
+++ b/tools/python/convert.py
@@ -187,9 +187,7 @@ def convert_model(conf, quantize_stat):
     elif platform == Platform.MEGENGINE:
         from transform import megengine_converter
         converter = megengine_converter.MegengineConverter(
-                        option,
-                        conf["model_file_path"]
-                    )
+            option, conf["model_file_path"])
     else:
         mace_check(False, "Mace do not support platorm %s yet." % platform)
 
diff --git a/tools/python/run_model.py b/tools/python/run_model.py
index 345b725..a51dfc4 100644
--- a/tools/python/run_model.py
+++ b/tools/python/run_model.py
@@ -145,7 +145,7 @@ def run_model_for_device(flags, args, dev, model_name, model_conf):
                   "device": runtime.name
                   }
 
-    opts = ["--%s=%s" % (arg_key, arg_val) for arg_key, arg_val in
+    opts = ["--%s='%s'" % (arg_key, arg_val) for arg_key, arg_val in
             model_args.items()] + args
     should_generate_data = (flags.validate
                             or flags.tune or "--benchmark" in opts)
diff --git a/tools/python/transform/megengine_converter.py b/tools/python/transform/megengine_converter.py
index ba21e55..7952509 100644
--- a/tools/python/transform/megengine_converter.py
+++ b/tools/python/transform/megengine_converter.py
@@ -67,15 +67,11 @@ def is_consumer_group_conv(mge_symvar, var2oprs, map_oprs):
     n_consumers = len(consumer_ids)
     for consumer_id in consumer_ids:
         consumer_op = map_oprs[consumer_id[0]]
-        if (
-            mgb.cgtools.get_opr_type(consumer_op)
-            in ("ConvolutionForward", "ConvolutionBackwardData")
-            and consumer_op.params["sparse"] == "GROUP"
-        ):
-            mace_check(
-                n_consumers == 1,
-                "This tensor should only feed depthwise conv/deconv",
-            )
+        if (mgb.cgtools.get_opr_type(consumer_op)
+                in ("ConvolutionForward", "ConvolutionBackwardData")
+                and consumer_op.params["sparse"] == "GROUP"):
+            mace_check(n_consumers == 1,
+                       "This tensor should only feed depthwise conv/deconv")
             return True
     return False
 
@@ -170,10 +166,8 @@ class MegengineConverter(base_converter.ConverterInterface):
                 if "," in op.input[i]:
                     op_name = op.input[i]
                     op_name = op_name.replace(",", "#")
-                    if (
-                        op_name in self._option.input_nodes
-                        or op_name in self._option.output_nodes
-                    ):
+                    if (op_name in self._option.input_nodes or \
+                            op_name in self._option.output_nodes):
                         op.input[i] = op_name
             for i in six.moves.range(len(op.output)):
                 if "," in op.output[i]:
@@ -200,12 +194,8 @@ class MegengineConverter(base_converter.ConverterInterface):
             kernels_arg = op_def.arg.add()
             kernels_arg.name = MaceKeyword.mace_kernel_str
             kernels_arg.ints.extend(kernel)
-        if op_def.type in (
-            MaceOp.Conv2D.name,
-            MaceOp.DepthwiseConv2d.name,
-            MaceOp.Deconv2D.name,
-            MaceOp.DepthwiseDeconv2d.name,
-        ):
+        if op_def.type in (MaceOp.Conv2D.name, MaceOp.DepthwiseConv2d.name,
+                           MaceOp.Deconv2D.name, MaceOp.DepthwiseDeconv2d.name):
             dilation = [params[mge_dilate_h_str], params[mge_dilate_w_str]]
             dilation_arg = op_def.arg.add()
             dilation_arg.name = MaceKeyword.mace_dilations_str
@@ -225,12 +215,10 @@ class MegengineConverter(base_converter.ConverterInterface):
 
                     if mgb.cgtools.get_opr_type(next_op) == "BatchNormForward":
                         self._skip_tensors.update(
-                            [inp.name for inp in mge_op.inputs]
-                        )
+                            [inp.name for inp in mge_op.inputs])
                         # using output name to address input symbol var
-                        self._bn_statistis_tensors[
-                            mge_op.outputs[0].name
-                        ] = mge_op.inputs[0]
+                        self._bn_statistis_tensors[mge_op.outputs[0].name] = \
+                            mge_op.inputs[0]
                         # skip this reshape op
                         continue
 
@@ -274,21 +262,17 @@ class MegengineConverter(base_converter.ConverterInterface):
                         output.name,
                         nshape,
                         mace_pb2.DT_FLOAT,
-                        get_symvar_value(output).flatten(),
-                    )
+                        get_symvar_value(output).flatten())
             else:
                 # handle all constant values
                 for const_tensor in mge_op.inputs:
-                    if (
-                        const_tensor.inferred_value is not None
-                        and const_tensor.name not in self._skip_tensors
-                    ):
+                    if (const_tensor.inferred_value is not None
+                            and const_tensor.name not in self._skip_tensors):
                         self.add_tensor(
                             const_tensor.name,
                             const_tensor.imm_shape,
                             mace_pb2.DT_INT32,
-                            const_tensor.inferred_value.flatten(),
-                        )
+                            const_tensor.inferred_value.flatten())
 
     def convert_nop(self, mge_op):
         pass
@@ -441,18 +425,14 @@ class MegengineConverter(base_converter.ConverterInterface):
 
         # check the case of counting include padding
         mode = mge_op.params["mode"]
-        if mode == "AVERAGE_COUNT_EXCLUDE_PADDING" or (
-            mode == "AVERAGE"
-            and mge_op.params["pad_w"] == 0
-            and mge_op.params["pad_h"] == 0
-        ):
+        if mode == "AVERAGE_COUNT_EXCLUDE_PADDING" or \
+                (mode == "AVERAGE" and mge_op.params["pad_w"] == 0 and \
+                 mge_op.params["pad_h"] == 0):
             pool_type_arg.i = PoolingType.AVG.value
         elif mode == "MAX":
             pool_type_arg.i = PoolingType.MAX.value
         else:
-            mace_check(
-                False, "AVERAGE pooling should not count padding values"
-            )
+            mace_check(False, "AVERAGE pooling should not count padding values")
 
         self.add_stride_pad_kernel_arg(mge_op.params, op)
 
@@ -564,9 +544,8 @@ class MegengineConverter(base_converter.ConverterInterface):
 
         scale_name = mge_op.name + "_scale"
         offset_name = mge_op.name + "_offset"
-        scale_value = (
-            1.0 / np.vectorize(math.sqrt)(var_value + epsilon_value)
-        ) * gamma_value
+        scale_value = (1.0 / np.vectorize(math.sqrt)(
+            var_value + epsilon_value)) * gamma_value
         offset_value = (-mean_value * scale_value) + beta_value
         self.add_tensor(
             scale_name, scale_value.shape, mace_pb2.DT_FLOAT, scale_value
diff --git a/tools/python/validate.py b/tools/python/validate.py
index d4c4887..52fb851 100644
--- a/tools/python/validate.py
+++ b/tools/python/validate.py
@@ -318,6 +318,51 @@ def validate_onnx_model(model_file,
                        mace_out_value, value,
                        validation_threshold, log_file)
 
+def validate_megengine_model(model_file, input_file,
+                             mace_out_file, input_names, input_shapes,
+                             input_data_formats, output_names, output_shapes,
+                             output_data_formats, validation_threshold,
+                             input_data_types, log_file):
+    import megengine._internal as mgb
+
+    if not os.path.isfile(model_file):
+        common.MaceLogger.error(
+            VALIDATION_MODULE,
+            "Input graph file '" + model_file + "' does not exist!",
+            )
+
+    feed_inputs = []
+    for i in range(len(input_names)):
+        input_value = load_data(
+            util.formatted_file_name(input_file, input_names[i]),
+            input_data_types[i])
+        input_value = input_value.reshape(input_shapes[i])
+        if (input_data_formats[i] == DataFormat.NHWC and \
+                len(input_shapes[i]) == 4):
+            input_value = input_value.transpose((0, 3, 1, 2))
+        feed_inputs.append(input_value)
+
+    cg, _, outputs = mgb.load_comp_graph_from_file(model_file)
+    inputs = mgb.cgtools.get_dep_vars(outputs, "Host2DeviceCopy")
+    inputs = sorted(inputs, key=lambda i: i.name)
+    outputs = list(map(mgb.copy_output, outputs))
+    if len(outputs) == 1:
+        (outputs,) = outputs
+    func = cg.compile(inputs, outputs)
+
+    mge_output_value = func(*feed_inputs)
+
+    for i in range(len(output_names)):
+        output_file_name = \
+            util.formatted_file_name(mace_out_file, output_names[i])
+        mace_out_value = load_data(output_file_name)
+        if (output_data_formats[i] == DataFormat.NHWC and \
+                len(output_shapes[i]) == 4):
+            mace_out_value = \
+                mace_out_value.reshape(output_shapes[i]).transpose((0, 3, 1, 2))
+        compare_output(output_names[i], mace_out_value,
+                       mge_output_value, validation_threshold, log_file)
+
 
 def validate(platform, model_file, weight_file, input_file, mace_out_file,
              input_shape, output_shape, input_data_format,
@@ -354,3 +399,12 @@ def validate(platform, model_file, weight_file, input_file, mace_out_file,
                             output_node, output_shape, output_data_format,
                             validation_threshold,
                             input_data_type, backend, log_file)
+    elif platform == Platform.MEGENGINE:
+        validate_megengine_model(model_file,
+                                 input_file, mace_out_file,
+                                 input_node, input_shape,
+                                 input_data_format,
+                                 output_node, output_shape,
+                                 output_data_format,
+                                 validation_threshold,
+                                 input_data_type, log_file)
diff --git a/tools/sh_commands.py b/tools/sh_commands.py
index 7f4432b..b41ec8f 100644
--- a/tools/sh_commands.py
+++ b/tools/sh_commands.py
@@ -748,8 +748,8 @@ def validate_model(abi,
                 "--input_file=/mace/%s" % input_file_name,
                 "--mace_out_file=/mace/%s" % output_file_name,
                 "--device_type=%s" % device_type,
-                "--input_node=%s" % ",".join(input_nodes),
-                "--output_node=%s" % ",".join(output_nodes),
+                "--input_node='%s'" % ",".join(input_nodes),
+                "--output_node='%s'" % ",".join(output_nodes),
                 "--input_shape=%s" % ":".join(input_shapes),
                 "--output_shape=%s" % ":".join(output_shapes),
                 "--input_data_format=%s" % ",".join(input_data_formats),
diff --git a/tools/validate.py b/tools/validate.py
index a77b7fb..1e76f5b 100644
--- a/tools/validate.py
+++ b/tools/validate.py
@@ -331,22 +331,11 @@ def validate_onnx_model(platform, device_type, model_file,
                        validation_threshold, log_file)
 
 
-def validate_megengine_model(
-    platform,
-    device_type,
-    model_file,
-    input_file,
-    mace_out_file,
-    input_names,
-    input_shapes,
-    input_data_formats,
-    output_names,
-    output_shapes,
-    output_data_formats,
-    validation_threshold,
-    input_data_types,
-    log_file,
-):
+def validate_megengine_model(platform, device_type, model_file, input_file,
+                             mace_out_file, input_names, input_shapes,
+                             input_data_formats, output_names, output_shapes,
+                             output_data_formats, validation_threshold,
+                             input_data_types, log_file):
     import megengine._internal as mgb
 
     if not os.path.isfile(model_file):
@@ -359,13 +348,10 @@ def validate_megengine_model(
     for i in range(len(input_names)):
         input_value = load_data(
             common.formatted_file_name(input_file, input_names[i]),
-            input_data_types[i],
-        )
+            input_data_types[i])
         input_value = input_value.reshape(input_shapes[i])
-        if (
-            input_data_formats[i] == common.DataFormat.NHWC
-            and len(input_shapes[i]) == 4
-        ):
+        if (input_data_formats[i] == common.DataFormat.NHWC and \
+                len(input_shapes[i]) == 4):
             input_value = input_value.transpose((0, 3, 1, 2))
         feed_inputs.append(input_value)
 
@@ -380,26 +366,15 @@ def validate_megengine_model(
     mge_output_value = func(*feed_inputs)
 
     for i in range(len(output_names)):
-        output_file_name = common.formatted_file_name(
-            mace_out_file, output_names[i]
-        )
+        output_file_name = \
+            common.formatted_file_name(mace_out_file, output_names[i])
         mace_out_value = load_data(output_file_name)
-        if (
-            output_data_formats[i] == common.DataFormat.NHWC
-            and len(output_shapes[i]) == 4
-        ):
-            mace_out_value = mace_out_value.reshape(
-                output_shapes[i]
-            ).transpose((0, 3, 1, 2))
-        compare_output(
-            platform,
-            device_type,
-            output_names[i],
-            mace_out_value,
-            mge_output_value,
-            validation_threshold,
-            log_file,
-        )
+        if (output_data_formats[i] == common.DataFormat.NHWC and \
+                len(output_shapes[i]) == 4):
+            mace_out_value = \
+                mace_out_value.reshape(output_shapes[i]).transpose((0, 3, 1, 2))
+        compare_output(platform, device_type, output_names[i], mace_out_value,
+                       mge_output_value, validation_threshold, log_file)
 
 
 def validate(platform, model_file, weight_file, input_file, mace_out_file,
