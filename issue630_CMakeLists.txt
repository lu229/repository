# For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html

# Sets the minimum version of CMake required to build the native library.

cmake_minimum_required(VERSION 3.4.1)

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.

#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../app/libs/${ANDROID_ABI})

include_directories(${CMAKE_SOURCE_DIR}/)
include_directories(${CMAKE_SOURCE_DIR}/src/main/cpp/include)

set(mace_lib ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libmace_static.a)
set(mace_core ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libcore.a)
set(mace_generated_version ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libgenerated_version.a)
set(mace_port_android ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libport_android.a)
set(mace_port_linux_base ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libport_linux_base.a)
set(mace_proto ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libproto.a)
set(mace_utils ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libutils.a)
set(mace_generated_opencl_kernel ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libgenerated_opencl_kernel.a)
set(mace_ops ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libops.a)
set(mace_port_base ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libport_base.a)
set(mace_port_posix ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libport_posix.a)
set(mace_protobuf_lite ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libprotobuf-lite.a)
set(mace_rpcmem ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/rpcmem.a)

set(mobilenet_lib ${CMAKE_SOURCE_DIR}/src/main/cpp/lib/armeabi-v7a/libmodel.a)

link_libraries(${mace_lib} ${mace_core} ${mace_core} ${mace_generated_version}
        ${mace_port_android} ${mace_port_linux_base} ${mace_port_posix} ${mace_port_base}
        ${mace_proto} ${mace_utils} ${mace_generated_opencl_kernel} ${mace_ops}
        ${mace_protobuf_lite} ${mace_rpcmem} ${mobilenet_lib})

add_library(mace_mobile_jni
             SHARED
             src/main/cpp/spe.cc )

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
              log-lib

              # Specifies the name of the NDK library that
              # you want CMake to locate.
              log )

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.

target_link_libraries( # Specifies the target library.
                       mace_mobile_jni
                       # Links the target library to the log library
                       # included in the NDK.
                       ${log-lib} )